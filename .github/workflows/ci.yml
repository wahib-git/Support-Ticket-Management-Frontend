name: Frontend CI

on:
  workflow_dispatch:
#   push:
#     branches: [ main ]
#   pull_request:
#     branches: [ main ]

jobs:
  lint:
    name: Lint code style check 
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Run Linter
        run: npm run lint

  test:
    name: Test (unit, integration & e2e)
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      #  Générer le fichier d’environnement pour la CI
      - name: Generate CI environment file
        run: |
          mkdir -p src/environments
          cat > src/environments/environment.ci.ts <<EOL
          export const environment = {
            production: true,
            apiUrl: '${{ secrets.API_URL }}',
            imageUrl: '${{ secrets.imageUrl }}',
            tokenKey: '${{ secrets.tokenKey }}'
          };
          EOL

      - name: Run unit & integration tests
        run: npm run test:ci

      - name: Build Angular app
        run: npm run build -- --configuration=ci

      #  Lancer les tests end-to-end (Cypress)
      - name: Run e2e tests
        run: npm run e2e:ci

  GitleaksScan:
    name: gitleaks Scan
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0
      - uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GIT_TOKEN }}

  sonarcloud:
    name: SonarCloud Scan
    runs-on: ubuntu-latest
    needs: GitleaksScan
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: SonarCloud Scan
        uses: SonarSource/sonarqube-scan-action@v5.3.0
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN_FRONTEND }}
          GITHUB_TOKEN: ${{ secrets.GIT_TOKEN }}
        with:
          args: 
            -Dsonar.organization=wahib-git
            -Dsonar.projectKey=Support-Ticket-Management-Frontend
            


  TrivyScanfileSystem:
    name: Trivy Scan File System
    runs-on: ubuntu-latest
    needs: GitleaksScan
    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0
      - name: Run Trivy vulnerability scanner in repo mode
        uses: aquasecurity/trivy-action@0.32.0
        with:
          scan-type: "fs"
          severity: "CRITICAL,HIGH"

  OWASPDependencyCheck:
    name: OWASP Dependency Check
    runs-on: ubuntu-latest
    needs: TrivyScanfileSystem
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - uses: dependency-check/Dependency-Check_Action@1.1.0
        with:
          project: "Support-Ticket-Management-Frontend"
          path: "."
          format: "HTML"

      - name: Upload Dependency-Check report
        uses: actions/upload-artifact@v4
        with:
          name: dependency-check-report
          path: reports/dependency-check-report.html

  docker-build-Trivy-scan-Push:
    name: Build, Scan(trivy) & Push Docker Image
    runs-on: ubuntu-latest
    needs: OWASPDependencyCheck

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Build Docker image
        run: |
          IMAGE=${{ secrets.DOCKER_HUB_USERNAME }}/frontend:${{ github.sha }}
          docker build -t $IMAGE .
          echo "IMAGE=$IMAGE" >> $GITHUB_ENV

      - name: Trivy scan Docker image
        uses: aquasecurity/trivy-action@0.32.0
        with:
          image-ref: ${{ env.IMAGE }}
          severity: CRITICAL,HIGH
          format: "table"
          ignore-unfixed: true

      #  Génération SBOM avec Syft
      - name: Generate SBOM (Syft)
        uses: anchore/sbom-action@v0
        with:
          image: ${{ env.IMAGE }}
          output-file: sbom.spdx.json

      - name: Upload SBOM
        uses: actions/upload-artifact@v4
        with:
          name: sbom
          path: sbom.spdx.json

      - name: Log in to Docker Hub
        if: success()
        run: echo "${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}" | docker login -u ${{ secrets.DOCKER_HUB_USERNAME }} --password-stdin

      - name: Push Docker image
        if: success()
        run: docker push ${{ env.IMAGE }}
