name: Frontend CI

on:
  workflow_dispatch:
#   push:
#     branches: [ main ]
#   pull_request:
#     branches: [ main ]

jobs:
  # lint:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v5

  #     - name: Setup Node.js
  #       uses: actions/setup-node@v4
  #       with:
  #         node-version: 20
  #         cache: "npm"

  #     - name: Install dependencies
  #       run: npm ci

  #     - name: Run Linter
  #       run: npm run lint

  test:
    runs-on: ubuntu-latest
#    needs: lint
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      # 4. Générer le fichier d’environnement pour la CI
      - name: Generate CI environment file
        run: |
          mkdir -p src/environments
          cat > src/environments/environment.ci.ts <<EOL
          export const environment = {
            production: true,
            apiUrl: '${{ secrets.API_URL }}',
            tokenKey: '${{ secrets.tokenKey }}'
          };
          EOL
      # 5. Lancer les tests unitaires et d'intégration (Karma)
      # - name: Run unit & integration tests
      #   run: npm run test:ci

      # 6. Compiler l’application Angular avec la config CI
      - name: Build Angular app
        run: npm run build -- --configuration=ci

      # 7. Lancer les tests end-to-end (Cypress)
      - name: Run e2e tests
        run: npm run e2e:ci
      # - name: Run Tests
      #   run: |
      #     npm run test:ci
      #     npm run e2e

#   sonarcloud:
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v5
#         with:
#           fetch-depth: 0

#       - name: SonarCloud Scan
#         uses: SonarSource/sonarqube-scan-action@v5.3.0
#         env:
#           SONAR_TOKEN: ${{ secrets.SONAR_TOKEN_FRONTEND }}
#           GITHUB_TOKEN: ${{ secrets.GIT_TOKEN }}
#         with:
#           args: 
#             -Dsonar.organization=wahib-git
#             -Dsonar.projectKey=Support-Ticket-Management-Frontend
            
#   GitleaksScan:
#     name: gitleaks
#     runs-on: ubuntu-latest
#     steps:
#       - uses: actions/checkout@v5
#         with:
#           fetch-depth: 0
#       - uses: gitleaks/gitleaks-action@v2
#         env:
#           GITHUB_TOKEN: ${{ secrets.GIT_TOKEN }}

#   TrivyScan:
#     name: Trivy Scan
#     runs-on: ubuntu-latest
#     steps:
#       - uses: actions/checkout@v5
#         with:
#           fetch-depth: 0
#       - name: Run Trivy vulnerability scanner in repo mode
#         uses: aquasecurity/trivy-action@0.32.0
#         with:
#           scan-type: "fs"
#           severity: "CRITICAL,HIGH"

#   OWASPDependencyCheck:
#     name: OWASP Dependency Check
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v5
#         with:
#           fetch-depth: 0

#       - name: Setup Node.js
#         uses: actions/setup-node@v4
#         with:
#           node-version: 20
#           cache: "npm"

#       - name: Install dependencies
#         run: npm ci

#       - uses: dependency-check/Dependency-Check_Action@1.1.0
#         with:
#           project: "Support-Ticket-Management-Frontend"
#           path: "."
#           format: "HTML"
# #         out: "reports"
#       - name: Upload Dependency-Check report
#         uses: actions/upload-artifact@v4
#         with:
#           name: dependency-check-report
#           path: reports/dependency-check-report.html

#   docker-build-and-scan:
#     name: Build, Scan & Push Docker Image
#     runs-on: ubuntu-latest

#     steps:
#       #  Récupération du code
#       - name: Checkout repository
#         uses: actions/checkout@v5

#       #  Build de l’image
#       - name: Build Docker image
#         run: |
#           IMAGE=${{ secrets.DOCKER_HUB_USERNAME }}/frontend:${{ github.sha }}
#           docker build -t $IMAGE .
#           echo "IMAGE=$IMAGE" >> $GITHUB_ENV

#       #  Scan de l’image avec Trivy
#       - name: Trivy scan Docker image
#         uses: aquasecurity/trivy-action@0.32.0
#         with:
#           image-ref: ${{ env.IMAGE }}
#           severity: CRITICAL,HIGH
#           format: "table"
#           ignore-unfixed: true

#       #  Génération SBOM avec Syft
#       - name: Generate SBOM (Syft)
#         uses: anchore/sbom-action@v0
#         with:
#           image: ${{ env.IMAGE }}
#           output-file: sbom.spdx.json

#       - name: Upload SBOM
#         uses: actions/upload-artifact@v4
#         with:
#           name: sbom
#           path: sbom.spdx.json

#       #  Connexion Docker Hub (seulement si scan OK)
#       - name: Log in to Docker Hub
#         if: success()
#         run: echo "${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}" | docker login -u ${{ secrets.DOCKER_HUB_USERNAME }} --password-stdin

#       #  Push sur Docker Hub
#       - name: Push Docker image
#         if: success()
#         run: docker push ${{ env.IMAGE }}
